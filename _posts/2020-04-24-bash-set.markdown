---
layout: post
title:  "The bash set command"
date:   2020-04-20
categories: unix bash commandline
---

This post explores the `set` command that modifies how `bash` handles certain conditions.

# What happened?

This week, a Gitlab pipeline script written as bash script failed. The command was akin to 

    ... | grep -v asdf

Grep exits with code `1` when everything is filtered. In combination with `set -e` (which seems to be set by default), this failed the pipeline. An ok reason to dig a bit into `set`.

# The set bash builtin

A quote from the [set](http://linuxcommand.org/lc3_man_pages/seth.html) manpage:
> set - Set or unset values of shell options and positional parameters.

This by itself means nada to me. The man page does not contain any tutorial material, let alone examples, thus is not suitable for learning.

The [set](https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html) page in the bash manual contains sufficient information to gain understanding. The paragraph about the `-e` option is particularly helpful as it is the only one that is fortunately *very verbose*. In its entirety, it reads

> Exit immediately if a pipeline (see Pipelines), which may consist of a single simple command (see Simple Commands), a list (see Lists), or a compound command (see Compound Commands) returns a non-zero status. The shell does not exit if the command that fails is part of the command list immediately following a while or until keyword, part of the test in an if statement, part of any command executed in a && or \|\| list except the command following the final && or \|\|, any command in a pipeline but the last, or if the commandâ€™s return status is being inverted with !. If a compound command other than a subshell returns a non-zero status because a command failed while -e was being ignored, the shell does not exit. A trap on ERR, if set, is executed before the shell exits.

> This option applies to the shell environment and each subshell environment separately (see Command Execution Environment), and may cause subshells to exit before executing all the commands in the subshell.

> If a compound command or shell function executes in a context where -e is being ignored, none of the commands executed within the compound command or function body will be affected by the -e setting, even if -e is set and a command returns a failure status. If a compound command or shell function sets -e while executing in a context where -e is ignored, that setting will not have any effect until the compound command or the command containing the function call completes.

This quite nicely sums up the `e` set option for me.

# Other options

- `set -x` looks pretty interesting. It makes bash repeat all simple commands and thus makes larger single-line pipelines readable.

```sh
root@241589eda689:/workspaces/stefan-hanke.github.io# echo "asdf" | grep asdf | echo -n
+ grep asdf
+ echo -n
+ echo asdf
root@241589eda689:/workspaces/stefan-hanke.github.io# 
```

- ... and all the others read kindof interesting.

# Related commands

- [shopt](https://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html)
- [error trapping](https://stackoverflow.com/questions/35800082/how-to-trap-err-when-using-set-e-in-bash/35800457#35800457)
- [job control](https://www.gnu.org/software/bash/manual/html_node/Job-Control.html#Job-Control)
